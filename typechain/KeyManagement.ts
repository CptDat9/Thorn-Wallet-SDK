/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type SignatureRSVStruct = {
  r: BytesLike;
  s: BytesLike;
  v: BigNumberish;
};

export type SignatureRSVStructOutput = [r: string, s: string, v: bigint] & {
  r: string;
  s: string;
  v: bigint;
};

export interface KeyManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "VERSION"
      | "createKey"
      | "createKeyAndEnableModule"
      | "disableModule"
      | "ecdsaPublicKey"
      | "ed25519PublicKey"
      | "enableModule"
      | "modules"
      | "signECDSA"
      | "signEd25519"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "createKey", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createKeyAndEnableModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ecdsaPublicKey",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ed25519PublicKey",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enableModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "modules",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signECDSA",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signEd25519",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createKeyAndEnableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ecdsaPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ed25519PublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "modules", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signECDSA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signEd25519",
    data: BytesLike
  ): Result;
}

export interface KeyManagement extends BaseContract {
  connect(runner?: ContractRunner | null): KeyManagement;
  waitForDeployment(): Promise<this>;

  interface: KeyManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  VERSION: TypedContractMethod<[], [string], "view">;

  createKey: TypedContractMethod<[], [void], "nonpayable">;

  createKeyAndEnableModule: TypedContractMethod<
    [module: AddressLike],
    [void],
    "nonpayable"
  >;

  disableModule: TypedContractMethod<
    [module: AddressLike],
    [void],
    "nonpayable"
  >;

  ecdsaPublicKey: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  ed25519PublicKey: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  enableModule: TypedContractMethod<
    [module: AddressLike],
    [void],
    "nonpayable"
  >;

  modules: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  signECDSA: TypedContractMethod<
    [owner: AddressLike, data: BytesLike, auth: BytesLike],
    [SignatureRSVStructOutput],
    "view"
  >;

  signEd25519: TypedContractMethod<
    [owner: AddressLike, auth: BytesLike, message: BytesLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createKey"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createKeyAndEnableModule"
  ): TypedContractMethod<[module: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableModule"
  ): TypedContractMethod<[module: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ecdsaPublicKey"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "ed25519PublicKey"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "enableModule"
  ): TypedContractMethod<[module: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "modules"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "signECDSA"
  ): TypedContractMethod<
    [owner: AddressLike, data: BytesLike, auth: BytesLike],
    [SignatureRSVStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "signEd25519"
  ): TypedContractMethod<
    [owner: AddressLike, auth: BytesLike, message: BytesLike],
    [string],
    "view"
  >;

  filters: {};
}
